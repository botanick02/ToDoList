{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport DateTimeToString from \"../../Convertors/DateTimeToString\";\nvar initialState = [{\n  id: 1,\n  title: \"Do something\",\n  categoryId: 2,\n  createdDate: \"2022-06-01T13:53\",\n  deadlineDate: \"2022-06-23T13:53\",\n  isDone: false,\n  doneDate: \"\"\n}, {\n  id: 8,\n  title: \"Do something 4\",\n  categoryId: 3,\n  createdDate: \"2022-06-04T13:53\",\n  deadlineDate: \"\",\n  isDone: true,\n  doneDate: \"2022-06-04T13:56\"\n}];\nvar toDoTasksSlice = createSlice({\n  name: 'toDoTasks',\n  initialState: initialState,\n  reducers: {\n    taskAdded: function taskAdded(state, action) {\n      state.push(action.payload);\n    },\n    taskUpdated: function taskUpdated(state, action) {\n      var _action$payload = action.payload,\n          id = _action$payload.id,\n          title = _action$payload.title,\n          categoryId = _action$payload.categoryId,\n          deadlineDate = _action$payload.deadlineDate;\n      var existingTask = state.find(function (task) {\n        return task.id === +id;\n      });\n\n      if (existingTask) {\n        existingTask.title = title;\n        existingTask.categoryId = categoryId;\n        existingTask.deadlineDate = deadlineDate;\n      }\n    },\n    isDoneSwitched: function isDoneSwitched(state, action) {\n      var id = action.payload.id;\n      var existingTask = state.find(function (task) {\n        return task.id === id;\n      });\n\n      if (existingTask) {\n        existingTask.isDone = !existingTask.isDone;\n\n        if (existingTask.isDone) {\n          existingTask.doneDate = DateTimeToString(new Date());\n        } else {\n          existingTask.doneDate = \"\";\n        }\n      }\n    },\n    taskDeleted: function taskDeleted(state, action) {\n      var id = action.payload.id;\n      return state.filter(function (task) {\n        return task.id !== id;\n      });\n    }\n  }\n});\nvar _toDoTasksSlice$actio = toDoTasksSlice.actions,\n    taskAdded = _toDoTasksSlice$actio.taskAdded,\n    taskUpdated = _toDoTasksSlice$actio.taskUpdated,\n    isDoneSwitched = _toDoTasksSlice$actio.isDoneSwitched,\n    taskDeleted = _toDoTasksSlice$actio.taskDeleted;\nexport { taskAdded, taskUpdated, isDoneSwitched, taskDeleted };\nexport default toDoTasksSlice.reducer;","map":{"version":3,"names":["createSlice","DateTimeToString","initialState","id","title","categoryId","createdDate","deadlineDate","isDone","doneDate","toDoTasksSlice","name","reducers","taskAdded","state","action","push","payload","taskUpdated","existingTask","find","task","isDoneSwitched","Date","taskDeleted","filter","actions","reducer"],"sources":["E:/sana/ToDoList/react-view/src/features/ToDoTasks/ToDoTasksSlice.js"],"sourcesContent":["import {createSlice} from '@reduxjs/toolkit'\r\nimport DateTimeToString from \"../../Convertors/DateTimeToString\";\r\n\r\n\r\nconst initialState = [\r\n    {\r\n        id: 1,\r\n        title: \"Do something\",\r\n        categoryId: 2,\r\n        createdDate: \"2022-06-01T13:53\",\r\n        deadlineDate: \"2022-06-23T13:53\",\r\n        isDone: false,\r\n        doneDate: \"\"\r\n    },\r\n    {\r\n        id: 8,\r\n        title: \"Do something 4\",\r\n        categoryId: 3,\r\n        createdDate: \"2022-06-04T13:53\",\r\n        deadlineDate: \"\",\r\n        isDone: true,\r\n        doneDate: \"2022-06-04T13:56\"\r\n    },\r\n]\r\n\r\nconst toDoTasksSlice = createSlice({\r\n    name: 'toDoTasks',\r\n    initialState,\r\n    reducers: {\r\n        taskAdded(state, action) {\r\n            state.push(action.payload);\r\n        },\r\n        taskUpdated(state, action) {\r\n            const {id, title, categoryId, deadlineDate} = action.payload;\r\n            let existingTask = state.find(task => task.id === +id);\r\n            if (existingTask) {\r\n                existingTask.title = title;\r\n                existingTask.categoryId = categoryId;\r\n                existingTask.deadlineDate = deadlineDate;\r\n            }\r\n        },\r\n        isDoneSwitched(state, action) {\r\n            const {id} = action.payload;\r\n            let existingTask = state.find(task => task.id === id);\r\n            if (existingTask) {\r\n                existingTask.isDone = !existingTask.isDone;\r\n                if(existingTask.isDone){\r\n                    existingTask.doneDate = DateTimeToString(new Date());\r\n                }else{\r\n                    existingTask.doneDate = \"\";\r\n                }\r\n            }\r\n        },\r\n        taskDeleted(state, action) {\r\n            const {id} = action.payload;\r\n            return state.filter(task => task.id !== id);\r\n        }\r\n    }\r\n})\r\nexport const {taskAdded, taskUpdated, isDoneSwitched, taskDeleted} = toDoTasksSlice.actions;\r\n\r\nexport default toDoTasksSlice.reducer"],"mappings":"AAAA,SAAQA,WAAR,QAA0B,kBAA1B;AACA,OAAOC,gBAAP,MAA6B,mCAA7B;AAGA,IAAMC,YAAY,GAAG,CACjB;EACIC,EAAE,EAAE,CADR;EAEIC,KAAK,EAAE,cAFX;EAGIC,UAAU,EAAE,CAHhB;EAIIC,WAAW,EAAE,kBAJjB;EAKIC,YAAY,EAAE,kBALlB;EAMIC,MAAM,EAAE,KANZ;EAOIC,QAAQ,EAAE;AAPd,CADiB,EAUjB;EACIN,EAAE,EAAE,CADR;EAEIC,KAAK,EAAE,gBAFX;EAGIC,UAAU,EAAE,CAHhB;EAIIC,WAAW,EAAE,kBAJjB;EAKIC,YAAY,EAAE,EALlB;EAMIC,MAAM,EAAE,IANZ;EAOIC,QAAQ,EAAE;AAPd,CAViB,CAArB;AAqBA,IAAMC,cAAc,GAAGV,WAAW,CAAC;EAC/BW,IAAI,EAAE,WADyB;EAE/BT,YAAY,EAAZA,YAF+B;EAG/BU,QAAQ,EAAE;IACNC,SADM,qBACIC,KADJ,EACWC,MADX,EACmB;MACrBD,KAAK,CAACE,IAAN,CAAWD,MAAM,CAACE,OAAlB;IACH,CAHK;IAINC,WAJM,uBAIMJ,KAJN,EAIaC,MAJb,EAIqB;MAAA,sBACuBA,MAAM,CAACE,OAD9B;MAAA,IAChBd,EADgB,mBAChBA,EADgB;MAAA,IACZC,KADY,mBACZA,KADY;MAAA,IACLC,UADK,mBACLA,UADK;MAAA,IACOE,YADP,mBACOA,YADP;MAEvB,IAAIY,YAAY,GAAGL,KAAK,CAACM,IAAN,CAAW,UAAAC,IAAI;QAAA,OAAIA,IAAI,CAAClB,EAAL,KAAY,CAACA,EAAjB;MAAA,CAAf,CAAnB;;MACA,IAAIgB,YAAJ,EAAkB;QACdA,YAAY,CAACf,KAAb,GAAqBA,KAArB;QACAe,YAAY,CAACd,UAAb,GAA0BA,UAA1B;QACAc,YAAY,CAACZ,YAAb,GAA4BA,YAA5B;MACH;IACJ,CAZK;IAaNe,cAbM,0BAaSR,KAbT,EAagBC,MAbhB,EAawB;MAAA,IACnBZ,EADmB,GACbY,MAAM,CAACE,OADM,CACnBd,EADmB;MAE1B,IAAIgB,YAAY,GAAGL,KAAK,CAACM,IAAN,CAAW,UAAAC,IAAI;QAAA,OAAIA,IAAI,CAAClB,EAAL,KAAYA,EAAhB;MAAA,CAAf,CAAnB;;MACA,IAAIgB,YAAJ,EAAkB;QACdA,YAAY,CAACX,MAAb,GAAsB,CAACW,YAAY,CAACX,MAApC;;QACA,IAAGW,YAAY,CAACX,MAAhB,EAAuB;UACnBW,YAAY,CAACV,QAAb,GAAwBR,gBAAgB,CAAC,IAAIsB,IAAJ,EAAD,CAAxC;QACH,CAFD,MAEK;UACDJ,YAAY,CAACV,QAAb,GAAwB,EAAxB;QACH;MACJ;IACJ,CAxBK;IAyBNe,WAzBM,uBAyBMV,KAzBN,EAyBaC,MAzBb,EAyBqB;MAAA,IAChBZ,EADgB,GACVY,MAAM,CAACE,OADG,CAChBd,EADgB;MAEvB,OAAOW,KAAK,CAACW,MAAN,CAAa,UAAAJ,IAAI;QAAA,OAAIA,IAAI,CAAClB,EAAL,KAAYA,EAAhB;MAAA,CAAjB,CAAP;IACH;EA5BK;AAHqB,CAAD,CAAlC;4BAkCqEO,cAAc,CAACgB,O;IAAtEb,S,yBAAAA,S;IAAWK,W,yBAAAA,W;IAAaI,c,yBAAAA,c;IAAgBE,W,yBAAAA,W;;AAEtD,eAAed,cAAc,CAACiB,OAA9B"},"metadata":{},"sourceType":"module"}